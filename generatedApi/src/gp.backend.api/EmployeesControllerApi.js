/**
 * backend-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Employee from '../gp.backend.model/Employee';

/**
* EmployeesController service.
* @module gp.backend.api/EmployeesControllerApi
* @version 1.0.0
*/
export default class EmployeesControllerApi {

    /**
    * Constructs a new EmployeesControllerApi. 
    * @alias module:gp.backend.api/EmployeesControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * @param {module:gp.backend.model/Employee} employee 
     * @param {File} profilePic 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    createEmployeeWithHttpInfo(employee, profilePic) {
      let postBody = null;
      // verify the required parameter 'employee' is set
      if (employee === undefined || employee === null) {
        throw new Error("Missing the required parameter 'employee' when calling createEmployee");
      }
      // verify the required parameter 'profilePic' is set
      if (profilePic === undefined || profilePic === null) {
        throw new Error("Missing the required parameter 'profilePic' when calling createEmployee");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'employee': employee,
        'profilePic': profilePic
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/employees', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:gp.backend.model/Employee} employee 
     * @param {File} profilePic 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    createEmployee(employee, profilePic) {
      return this.createEmployeeWithHttpInfo(employee, profilePic)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:gp.backend.model/Employee} employee 
     * @param {File} profilePic 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    editEmployeeWithHttpInfo(employee, profilePic) {
      let postBody = null;
      // verify the required parameter 'employee' is set
      if (employee === undefined || employee === null) {
        throw new Error("Missing the required parameter 'employee' when calling editEmployee");
      }
      // verify the required parameter 'profilePic' is set
      if (profilePic === undefined || profilePic === null) {
        throw new Error("Missing the required parameter 'profilePic' when calling editEmployee");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'employee': employee,
        'profilePic': profilePic
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/employees', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:gp.backend.model/Employee} employee 
     * @param {File} profilePic 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    editEmployee(employee, profilePic) {
      return this.editEmployeeWithHttpInfo(employee, profilePic)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:gp.backend.model/Employee} and HTTP response
     */
    getEmployeeWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEmployee");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Employee;
      return this.apiClient.callApi(
        '/employees/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:gp.backend.model/Employee}
     */
    getEmployee(id) {
      return this.getEmployeeWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} username 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:gp.backend.model/Employee} and HTTP response
     */
    getEmployeeByUsernameWithHttpInfo(username) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getEmployeeByUsername");
      }

      let pathParams = {
      };
      let queryParams = {
        'username': username
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Employee;
      return this.apiClient.callApi(
        '/employees/username', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} username 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:gp.backend.model/Employee}
     */
    getEmployeeByUsername(username) {
      return this.getEmployeeByUsernameWithHttpInfo(username)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} searchTerm 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:gp.backend.model/Employee>} and HTTP response
     */
    searchEmployeesWithHttpInfo(searchTerm) {
      let postBody = null;
      // verify the required parameter 'searchTerm' is set
      if (searchTerm === undefined || searchTerm === null) {
        throw new Error("Missing the required parameter 'searchTerm' when calling searchEmployees");
      }

      let pathParams = {
      };
      let queryParams = {
        'searchTerm': searchTerm
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Employee];
      return this.apiClient.callApi(
        '/employees', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} searchTerm 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:gp.backend.model/Employee>}
     */
    searchEmployees(searchTerm) {
      return this.searchEmployeesWithHttpInfo(searchTerm)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
