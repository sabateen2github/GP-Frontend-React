/**
 * My API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BookedTurnQueue from '../gp.backend.model/BookedTurnQueue';
import LatLng from '../gp.backend.model/LatLng';
import Queue from '../gp.backend.model/Queue';
import QueueSpec from '../gp.backend.model/QueueSpec';

/**
* QueueController service.
* @module gp.backend.api/QueueControllerApi
* @version v1
*/
export default class QueueControllerApi {

    /**
    * Constructs a new QueueControllerApi. 
    * @alias module:gp.backend.api/QueueControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * @param {String} id 
     * @param {String} branchId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    advanceQueueWithHttpInfo(id, branchId) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling advanceQueue");
      }
      // verify the required parameter 'branchId' is set
      if (branchId === undefined || branchId === null) {
        throw new Error("Missing the required parameter 'branchId' when calling advanceQueue");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'branchId': branchId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/queues/queue/advance', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id 
     * @param {String} branchId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    advanceQueue(id, branchId) {
      return this.advanceQueueWithHttpInfo(id, branchId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} userId 
     * @param {String} queueId 
     * @param {String} branchId 
     * @param {module:gp.backend.model/LatLng} location 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    bookQueueWithHttpInfo(userId, queueId, branchId, location) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling bookQueue");
      }
      // verify the required parameter 'queueId' is set
      if (queueId === undefined || queueId === null) {
        throw new Error("Missing the required parameter 'queueId' when calling bookQueue");
      }
      // verify the required parameter 'branchId' is set
      if (branchId === undefined || branchId === null) {
        throw new Error("Missing the required parameter 'branchId' when calling bookQueue");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling bookQueue");
      }

      let pathParams = {
      };
      let queryParams = {
        'userId': userId,
        'queueId': queueId,
        'branchId': branchId,
        'location': location
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/queues/queue/book', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} userId 
     * @param {String} queueId 
     * @param {String} branchId 
     * @param {module:gp.backend.model/LatLng} location 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    bookQueue(userId, queueId, branchId, location) {
      return this.bookQueueWithHttpInfo(userId, queueId, branchId, location)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} userId 
     * @param {String} queueId 
     * @param {String} branchId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    cancelTurnWithHttpInfo(userId, queueId, branchId) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling cancelTurn");
      }
      // verify the required parameter 'queueId' is set
      if (queueId === undefined || queueId === null) {
        throw new Error("Missing the required parameter 'queueId' when calling cancelTurn");
      }
      // verify the required parameter 'branchId' is set
      if (branchId === undefined || branchId === null) {
        throw new Error("Missing the required parameter 'branchId' when calling cancelTurn");
      }

      let pathParams = {
      };
      let queryParams = {
        'userId': userId,
        'queueId': queueId,
        'branchId': branchId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/queues/queue/book', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} userId 
     * @param {String} queueId 
     * @param {String} branchId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    cancelTurn(userId, queueId, branchId) {
      return this.cancelTurnWithHttpInfo(userId, queueId, branchId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id 
     * @param {String} branchId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteQueueWithHttpInfo(id, branchId) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteQueue");
      }
      // verify the required parameter 'branchId' is set
      if (branchId === undefined || branchId === null) {
        throw new Error("Missing the required parameter 'branchId' when calling deleteQueue");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'branchId': branchId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/queues/queue', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id 
     * @param {String} branchId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteQueue(id, branchId) {
      return this.deleteQueueWithHttpInfo(id, branchId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:gp.backend.model/QueueSpec} queueSpec 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    editQueueSpecWithHttpInfo(queueSpec) {
      let postBody = queueSpec;
      // verify the required parameter 'queueSpec' is set
      if (queueSpec === undefined || queueSpec === null) {
        throw new Error("Missing the required parameter 'queueSpec' when calling editQueueSpec");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/queues/queue', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:gp.backend.model/QueueSpec} queueSpec 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    editQueueSpec(queueSpec) {
      return this.editQueueSpecWithHttpInfo(queueSpec)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:gp.backend.model/BookedTurnQueue>} and HTTP response
     */
    getActiveQueuesWithHttpInfo(userId) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getActiveQueues");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [BookedTurnQueue];
      return this.apiClient.callApi(
        '/queues/active/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:gp.backend.model/BookedTurnQueue>}
     */
    getActiveQueues(userId) {
      return this.getActiveQueuesWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} branchId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:gp.backend.model/QueueSpec>} and HTTP response
     */
    getAllQueueSpecsWithHttpInfo(branchId) {
      let postBody = null;
      // verify the required parameter 'branchId' is set
      if (branchId === undefined || branchId === null) {
        throw new Error("Missing the required parameter 'branchId' when calling getAllQueueSpecs");
      }

      let pathParams = {
      };
      let queryParams = {
        'branchId': branchId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QueueSpec];
      return this.apiClient.callApi(
        '/queues/spec/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} branchId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:gp.backend.model/QueueSpec>}
     */
    getAllQueueSpecs(branchId) {
      return this.getAllQueueSpecsWithHttpInfo(branchId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} branchId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:gp.backend.model/Queue>} and HTTP response
     */
    getAllQueuesWithHttpInfo(branchId) {
      let postBody = null;
      // verify the required parameter 'branchId' is set
      if (branchId === undefined || branchId === null) {
        throw new Error("Missing the required parameter 'branchId' when calling getAllQueues");
      }

      let pathParams = {
      };
      let queryParams = {
        'branchId': branchId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Queue];
      return this.apiClient.callApi(
        '/queues/queues/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} branchId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:gp.backend.model/Queue>}
     */
    getAllQueues(branchId) {
      return this.getAllQueuesWithHttpInfo(branchId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:gp.backend.model/BookedTurnQueue>} and HTTP response
     */
    getArchivedQueuesWithHttpInfo(userId) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getArchivedQueues");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [BookedTurnQueue];
      return this.apiClient.callApi(
        '/queues/archived/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} userId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:gp.backend.model/BookedTurnQueue>}
     */
    getArchivedQueues(userId) {
      return this.getArchivedQueuesWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id 
     * @param {String} branchId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:gp.backend.model/Queue} and HTTP response
     */
    getQueueWithHttpInfo(id, branchId) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getQueue");
      }
      // verify the required parameter 'branchId' is set
      if (branchId === undefined || branchId === null) {
        throw new Error("Missing the required parameter 'branchId' when calling getQueue");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'branchId': branchId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Queue;
      return this.apiClient.callApi(
        '/queues/queue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id 
     * @param {String} branchId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:gp.backend.model/Queue}
     */
    getQueue(id, branchId) {
      return this.getQueueWithHttpInfo(id, branchId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id 
     * @param {String} branchId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    resetQueueWithHttpInfo(id, branchId) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resetQueue");
      }
      // verify the required parameter 'branchId' is set
      if (branchId === undefined || branchId === null) {
        throw new Error("Missing the required parameter 'branchId' when calling resetQueue");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'branchId': branchId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/queues/queue/reset', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id 
     * @param {String} branchId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    resetQueue(id, branchId) {
      return this.resetQueueWithHttpInfo(id, branchId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} instituteId 
     * @param {String} userId 
     * @param {String} queueId 
     * @param {String} branchId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    switchUserLocationModeWithHttpInfo(instituteId, userId, queueId, branchId) {
      let postBody = null;
      // verify the required parameter 'instituteId' is set
      if (instituteId === undefined || instituteId === null) {
        throw new Error("Missing the required parameter 'instituteId' when calling switchUserLocationMode");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling switchUserLocationMode");
      }
      // verify the required parameter 'queueId' is set
      if (queueId === undefined || queueId === null) {
        throw new Error("Missing the required parameter 'queueId' when calling switchUserLocationMode");
      }
      // verify the required parameter 'branchId' is set
      if (branchId === undefined || branchId === null) {
        throw new Error("Missing the required parameter 'branchId' when calling switchUserLocationMode");
      }

      let pathParams = {
      };
      let queryParams = {
        'instituteId': instituteId,
        'userId': userId,
        'queueId': queueId,
        'branchId': branchId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/queues/queue/book/toggle', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} instituteId 
     * @param {String} userId 
     * @param {String} queueId 
     * @param {String} branchId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    switchUserLocationMode(instituteId, userId, queueId, branchId) {
      return this.switchUserLocationModeWithHttpInfo(instituteId, userId, queueId, branchId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
