/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BookedTurnQueue from '../gp.backend.model/BookedTurnQueue';
import Queue from '../gp.backend.model/Queue';
import QueueSpec from '../gp.backend.model/QueueSpec';

/**
* QueueController service.
* @module gp.backend.api/QueueControllerApi
* @version v0
*/
export default class QueueControllerApi {

    /**
    * Constructs a new QueueControllerApi. 
    * @alias module:gp.backend.api/QueueControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the advanceQueue operation.
     * @callback module:gp.backend.api/QueueControllerApi~advanceQueueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} branchId 
     * @param {module:gp.backend.api/QueueControllerApi~advanceQueueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    advanceQueue(id, branchId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling advanceQueue");
      }
      // verify the required parameter 'branchId' is set
      if (branchId === undefined || branchId === null) {
        throw new Error("Missing the required parameter 'branchId' when calling advanceQueue");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'branchId': branchId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/queues/queue/advance', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bookQueue operation.
     * @callback module:gp.backend.api/QueueControllerApi~bookQueueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {String} queueId 
     * @param {String} branchId 
     * @param {module:gp.backend.api/QueueControllerApi~bookQueueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bookQueue(userId, queueId, branchId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling bookQueue");
      }
      // verify the required parameter 'queueId' is set
      if (queueId === undefined || queueId === null) {
        throw new Error("Missing the required parameter 'queueId' when calling bookQueue");
      }
      // verify the required parameter 'branchId' is set
      if (branchId === undefined || branchId === null) {
        throw new Error("Missing the required parameter 'branchId' when calling bookQueue");
      }

      let pathParams = {
      };
      let queryParams = {
        'userId': userId,
        'queueId': queueId,
        'branchId': branchId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/queues/queue/book', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteQueue operation.
     * @callback module:gp.backend.api/QueueControllerApi~deleteQueueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} branchId 
     * @param {module:gp.backend.api/QueueControllerApi~deleteQueueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteQueue(id, branchId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteQueue");
      }
      // verify the required parameter 'branchId' is set
      if (branchId === undefined || branchId === null) {
        throw new Error("Missing the required parameter 'branchId' when calling deleteQueue");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'branchId': branchId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/queues/queue', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editQueueSpec operation.
     * @callback module:gp.backend.api/QueueControllerApi~editQueueSpecCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:gp.backend.model/QueueSpec} queueSpec 
     * @param {module:gp.backend.api/QueueControllerApi~editQueueSpecCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editQueueSpec(queueSpec, callback) {
      let postBody = queueSpec;
      // verify the required parameter 'queueSpec' is set
      if (queueSpec === undefined || queueSpec === null) {
        throw new Error("Missing the required parameter 'queueSpec' when calling editQueueSpec");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/queues/queue', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getActiveQueues operation.
     * @callback module:gp.backend.api/QueueControllerApi~getActiveQueuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:gp.backend.model/BookedTurnQueue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {module:gp.backend.api/QueueControllerApi~getActiveQueuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:gp.backend.model/BookedTurnQueue>}
     */
    getActiveQueues(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getActiveQueues");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [BookedTurnQueue];
      return this.apiClient.callApi(
        '/queues/active/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllQueueSpecs operation.
     * @callback module:gp.backend.api/QueueControllerApi~getAllQueueSpecsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:gp.backend.model/QueueSpec>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} branchId 
     * @param {module:gp.backend.api/QueueControllerApi~getAllQueueSpecsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:gp.backend.model/QueueSpec>}
     */
    getAllQueueSpecs(branchId, callback) {
      let postBody = null;
      // verify the required parameter 'branchId' is set
      if (branchId === undefined || branchId === null) {
        throw new Error("Missing the required parameter 'branchId' when calling getAllQueueSpecs");
      }

      let pathParams = {
      };
      let queryParams = {
        'branchId': branchId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QueueSpec];
      return this.apiClient.callApi(
        '/queues/spec/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllQueues operation.
     * @callback module:gp.backend.api/QueueControllerApi~getAllQueuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:gp.backend.model/Queue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} branchId 
     * @param {module:gp.backend.api/QueueControllerApi~getAllQueuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:gp.backend.model/Queue>}
     */
    getAllQueues(branchId, callback) {
      let postBody = null;
      // verify the required parameter 'branchId' is set
      if (branchId === undefined || branchId === null) {
        throw new Error("Missing the required parameter 'branchId' when calling getAllQueues");
      }

      let pathParams = {
      };
      let queryParams = {
        'branchId': branchId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Queue];
      return this.apiClient.callApi(
        '/queues/queues/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArchivedQueues operation.
     * @callback module:gp.backend.api/QueueControllerApi~getArchivedQueuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:gp.backend.model/BookedTurnQueue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {module:gp.backend.api/QueueControllerApi~getArchivedQueuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:gp.backend.model/BookedTurnQueue>}
     */
    getArchivedQueues(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getArchivedQueues");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [BookedTurnQueue];
      return this.apiClient.callApi(
        '/queues/archived/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQueue operation.
     * @callback module:gp.backend.api/QueueControllerApi~getQueueCallback
     * @param {String} error Error message, if any.
     * @param {module:gp.backend.model/Queue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} branchId 
     * @param {module:gp.backend.api/QueueControllerApi~getQueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:gp.backend.model/Queue}
     */
    getQueue(id, branchId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getQueue");
      }
      // verify the required parameter 'branchId' is set
      if (branchId === undefined || branchId === null) {
        throw new Error("Missing the required parameter 'branchId' when calling getQueue");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'branchId': branchId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Queue;
      return this.apiClient.callApi(
        '/queues/queue', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetQueue operation.
     * @callback module:gp.backend.api/QueueControllerApi~resetQueueCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} branchId 
     * @param {module:gp.backend.api/QueueControllerApi~resetQueueCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetQueue(id, branchId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resetQueue");
      }
      // verify the required parameter 'branchId' is set
      if (branchId === undefined || branchId === null) {
        throw new Error("Missing the required parameter 'branchId' when calling resetQueue");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'branchId': branchId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/queues/queue/reset', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
